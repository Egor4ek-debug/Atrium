import asyncio
import threading
from datetime import datetime

from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    MessageHandler,
    CallbackContext,
    filters
)

from app import db
from app.models import User, Task


def setup_telegram_bot(app, token):
    def run_bot():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        application = Application.builder().token(token).build()

        async def handle_message(update: Update, context: CallbackContext):
            with app.app_context():
                user_id = update.message.from_user.id

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                if update.message.contact:
                    phone = update.message.contact.phone_number
                    if not phone.startswith('+'):
                        phone = f'+{phone}'

                    user = User.query.filter_by(phone_number=phone).first()
                    if user:
                        user.telegram_id = user_id
                        db.session.commit()
                        await update.message.reply_text("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!")
                    else:
                        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω")

                # –ö–æ–º–∞–Ω–¥–∞ /start
                elif update.message.text == '/start':
                    welcome_text = (
                        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Task Manager Bot!\n\n"
                        "üìå –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π:\n"
                        "1. –ü—Ä–∏–≤—è–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n"
                        "2. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á\n"
                        "3. –û–±–Ω–æ–≤–ª—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\n\n"
                        "‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                        "/–º–æ–∏_–∑–∞–¥–∞—á–∏ - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á"
                    )

                    contact_btn = KeyboardButton("üì≤ –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", request_contact=True)
                    markup = ReplyKeyboardMarkup(
                        [[contact_btn], ["/–º–æ–∏_–∑–∞–¥–∞—á–∏"]],
                        resize_keyboard=True
                    )
                    await update.message.reply_text(welcome_text, reply_markup=markup)

                # –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏
                elif update.message.text == '/–º–æ–∏_–∑–∞–¥–∞—á–∏':
                    user = User.query.filter_by(telegram_id=user_id).first()
                    if not user:
                        return

                    tasks = Task.query.filter_by(worker_id=user.id).all()
                    markup = ReplyKeyboardMarkup(
                        [
                            ['‚úÖ –ì–æ—Ç–æ–≤–æ', 'üö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'],
                            ['‚õî –ù–µ —Å–º–æ–≥—É'],
                            ['üîÑ –û–±–Ω–æ–≤–∏—Ç—å']
                        ],
                        resize_keyboard=True
                    )

                    if not tasks:
                        await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á", reply_markup=markup)
                        return

                    response = ["üìå –í–∞—à–∏ –∑–∞–¥–∞—á–∏:"]
                    for task in tasks:
                        status = {
                            'new': 'üÜï –ù–æ–≤–∞—è',
                            'in_progress': 'üèó –í —Ä–∞–±–æ—Ç–µ',
                            'done': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞',
                            'canceled': 'üö´ –û—Ç–º–µ–Ω–µ–Ω–∞',
                            'rejected': '‚õî –û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
                        }.get(task.status, task.status)

                        response.append(
                            f"‚Ä¢ {task.description}\n"
                            f"üìç –ê–¥—Ä–µ—Å: {task.address}\n"
                            f"‚è∞ –°—Ä–æ–∫: {task.due_time.strftime('%d.%m.%Y %H:%M')}\n"
                            f"üìå –°—Ç–∞—Ç—É—Å: {status}"
                        )

                    await update.message.reply_text("\n\n".join(response), reply_markup=markup)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
                elif update.message.text in ['‚úÖ –ì–æ—Ç–æ–≤–æ', 'üö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', '‚õî –ù–µ —Å–º–æ–≥—É']:
                    user = User.query.filter_by(telegram_id=user_id).first()
                    if not user:
                        return

                    task = Task.query.filter(
                        Task.worker_id == user.id,
                        Task.status.in_(['new', 'in_progress'])
                    ).first()

                    if not task:
                        await update.message.reply_text("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                        return

                    if update.message.text == '‚úÖ –ì–æ—Ç–æ–≤–æ':
                        task.status = 'done'
                        task.completed_at = datetime.utcnow()
                        reply = "‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"
                    elif update.message.text == 'üö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ':
                        task.status = 'canceled'
                        reply = "üö´ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª"
                    elif update.message.text == '‚õî –ù–µ —Å–º–æ–≥—É':
                        task.status = 'rejected'
                        reply = "‚õî –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª"

                    db.session.commit()
                    await update.message.reply_text(reply, reply_markup=ReplyKeyboardRemove())

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã
                elif update.message.text.startswith(('üö´', '‚õî')):
                    user = User.query.filter_by(telegram_id=user_id).first()
                    task = Task.query.filter(
                        Task.worker_id == user.id,
                        Task.status.in_(['canceled', 'rejected'])
                    ).first()

                    if task:
                        task.reason = update.message.text.split(' ', 1)[-1]
                        db.session.commit()
                        await update.message.reply_text("üìù –ü—Ä–∏—á–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

        application.add_handler(MessageHandler(filters.ALL, handle_message))
        application.run_polling()

    thread = threading.Thread(target=run_bot, daemon=True)
    thread.start()
