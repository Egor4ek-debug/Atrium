import asyncio
import threading

from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, MessageHandler, filters, CallbackContext
from telegram.helpers import escape_markdown

from app import db
from app.models import User, Task


def setup_telegram_bot(app, token):
    def run_bot():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        application = Application.builder().token(token).build()

        async def handle_message(update: Update, context: CallbackContext):
            with app.app_context():
                user_id = update.message.from_user.id

                # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if update.message.text == '/start':
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                    welcome_text = (
                        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Task Manager Bot!*\n\n"
                        "‚öôÔ∏è **–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:**\n"
                        "1. –ü–æ–ª—É—á–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                        "2. –û–±–Ω–æ–≤–ª—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\n"
                        "3. –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö\n\n"
                        "üìå **–ö–æ–º–∞–Ω–¥—ã:**\n"
                        "/–º–æ–∏\_–∑–∞–¥–∞—á–∏ - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
                    )

                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
                    escaped_text = escape_markdown(welcome_text, version=2)

                    user = User.query.filter_by(telegram_id=user_id).first()

                    if user and user.telegram_id:
                        await update.message.reply_text(
                            escaped_text,
                            parse_mode='MarkdownV2',
                            reply_markup=ReplyKeyboardMarkup([["/–º–æ–∏_–∑–∞–¥–∞—á–∏"]], resize_keyboard=True)
                        )
                    else:
                        contact_btn = KeyboardButton("üì≤ –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", request_contact=True)
                        await update.message.reply_text(
                            escaped_text,
                            parse_mode='MarkdownV2',
                            reply_markup=ReplyKeyboardMarkup([[contact_btn]], resize_keyboard=True)
                        )

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á
                elif update.message.text == '/–º–æ–∏_–∑–∞–¥–∞—á–∏':
                    user = User.query.filter_by(telegram_id=user_id).first()
                    if not user:
                        await update.message.reply_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω!")
                        return

                    tasks = Task.query.filter(
                        Task.worker_id == user.id,
                        Task.status.in_(['new', 'in_progress'])
                    ).all()

                    for task in tasks:
                        if task.status == 'new':
                            task.status = 'in_progress'
                            db.session.commit()

                    markup = ReplyKeyboardMarkup(
                        [
                            ['‚úÖ –ì–æ—Ç–æ–≤–æ', 'üö´ –ü—Ä–æ–±–ª–µ–º—ã'],
                            ['‚õî –û—Ç–∫–∞–∑–∞—Ç—å—Å—è'],
                            ['üîÑ –û–±–Ω–æ–≤–∏—Ç—å']
                        ],
                        resize_keyboard=True
                    )

                    response = ["üìå *–í–∞—à–∏ –∑–∞–¥–∞—á–∏:*"]
                    for task in tasks:
                        status_emoji = {
                            'new': 'üÜï',
                            'in_progress': 'üèó',
                            'done': '‚úÖ',
                            'canceled': 'üö´',
                            'rejected': '‚õî'
                        }.get(task.status, '')

                        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown-—Å–∏–º–≤–æ–ª–æ–≤
                        description = escape_markdown(task.description, version=2)
                        address = escape_markdown(task.address, version=2)
                        due_time = escape_markdown(task.due_time.strftime('%d.%m.%Y %H:%M'), version=2)

                        task_info = (
                            f"{status_emoji} *{description}*\n"
                            f"üìç –ê–¥—Ä–µ—Å: {address}\n"
                            f"‚è∞ –°—Ä–æ–∫: {due_time}"
                        )
                        response.append(task_info)

                    await update.message.reply_text(
                        "\n\n".join(response),
                        parse_mode='MarkdownV2',  # –£–∫–∞–∑–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ Markdown
                        reply_markup=markup
                    )
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
                elif update.message.text in ['‚úÖ –ì–æ—Ç–æ–≤–æ', 'üö´ –ü—Ä–æ–±–ª–µ–º—ã', '‚õî –û—Ç–∫–∞–∑–∞—Ç—å—Å—è']:
                    user = User.query.filter_by(telegram_id=user_id).first()
                    task = Task.query.filter(
                        Task.worker_id == user.id,
                        Task.status.in_(['new', 'in_progress'])
                    ).first()

                    if not task:
                        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
                        return

                    if update.message.text == '‚úÖ –ì–æ—Ç–æ–≤–æ':
                        task.status = 'done'
                        reply = "‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!"
                    elif update.message.text == 'üö´ –ü—Ä–æ–±–ª–µ–º—ã':
                        task.status = 'canceled'
                        reply = "üö´ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É (–Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã)"
                    elif update.message.text == '‚õî –û—Ç–∫–∞–∑–∞—Ç—å—Å—è':
                        task.status = 'rejected'
                        reply = "‚õî –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ (–Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã)"

                    db.session.commit()
                    await update.message.reply_text(reply, reply_markup=ReplyKeyboardRemove())

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã
                elif update.message.text.startswith(('üö´', '‚õî')):
                    user = User.query.filter_by(telegram_id=user_id).first()
                    task = Task.query.filter(
                        Task.worker_id == user.id,
                        Task.status.in_(['canceled', 'rejected'])
                    ).first()

                    if task:
                        task.reason = update.message.text.split(' ', 1)[-1]
                        db.session.commit()
                        await update.message.reply_text("üìù –ü—Ä–∏—á–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

        application.add_handler(MessageHandler(filters.ALL, handle_message))
        application.run_polling()

    thread = threading.Thread(target=run_bot, daemon=True)
    thread.start()
