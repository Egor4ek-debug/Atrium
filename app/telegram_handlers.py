import asyncio
import logging
import threading
from datetime import datetime

from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, MessageHandler, filters, CallbackContext
from telegram.helpers import escape_markdown

from app import db
from app.models import User, Task

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


def setup_telegram_bot(app, token):
    def run_bot():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        application = Application.builder().token(token).build()

        async def handle_message(update: Update, context: CallbackContext):
            with app.app_context():
                user_id = update.message.from_user.id
                text = update.message.text
                logger.info(f"Received message: {text} from user: {user_id}")
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç)
                if text is None:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                    if update.message.contact:
                        phone = update.message.contact.phone_number
                        print(phone)
                        user = User.query.filter_by(phone_number=phone).first()
                        if user:
                            user.telegram_id = user_id
                            db.session.commit()
                            await update.message.reply_text(
                                "‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω!",
                                reply_markup=ReplyKeyboardMarkup([["/mytasks"]], resize_keyboard=True)
                            )
                        else:
                            await update.message.reply_text(
                                "–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ",
                                reply_markup=ReplyKeyboardMarkup([["/mytasks"]], resize_keyboard=True)
                            )
                    return  # –í—ã—Ö–æ–¥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
                if text == '/start':
                    user = User.query.filter_by(telegram_id=user_id).first()
                    welcome_text = (
                        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Task Manager Bot!*\n\n"
                        "‚öôÔ∏è **–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:**\n"
                        "1. –ü–æ–ª—É—á–∞–π—Ç–µ –∑–∞–¥–∞—á–∏\n"
                        "2. –û–±–Ω–æ–≤–ª—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\n"
                        "3. –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö\n\n"
                        "üìå **–ö–æ–º–∞–Ω–¥—ã:**\n"
                        "/mytasks - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"
                    )
                    escaped_text = escape_markdown(welcome_text, version=2)

                    if user and user.telegram_id:
                        await update.message.reply_text(
                            escaped_text,
                            parse_mode='MarkdownV2',
                            reply_markup=ReplyKeyboardMarkup([["/mytasks"]], resize_keyboard=True)
                        )
                    else:
                        contact_btn = KeyboardButton("üì≤ –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", request_contact=True)
                        await update.message.reply_text(
                            escaped_text,
                            parse_mode='MarkdownV2',
                            reply_markup=ReplyKeyboardMarkup([[contact_btn]], resize_keyboard=True)
                        )

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mytasks
                elif text == '/mytasks':
                    user = User.query.filter_by(telegram_id=user_id).first()
                    if not user:
                        await update.message.reply_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω!")
                        return

                    tasks = Task.query.filter(
                        Task.worker_id == user.id,
                        Task.status.in_(['new', 'in_progress'])
                    ).all()

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ new -> in_progress
                    for task in tasks:
                        if task.status == 'new':
                            task.status = 'in_progress'
                            db.session.commit()
                            logger.info(f"Task {task.id} updated to 'in_progress'")

                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                    keyboard = []
                    task_map = {}  # –•—Ä–∞–Ω–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ ID –∏ –ø–æ–ª–Ω–æ–≥–æ UUID
                    for task in tasks:
                        task_id_short = task.id.hex[:8]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 8 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                        task_map[task_id_short] = task.id
                        keyboard.append([
                            f"‚úÖ –ì–æ—Ç–æ–≤–æ {task_id_short}",
                            f"üö´ –ü—Ä–æ–±–ª–µ–º—ã {task_id_short}",
                            f"‚õî –û—Ç–∫–∞–∑–∞—Ç—å—Å—è {task_id_short}"
                        ])
                    context.user_data['task_map'] = task_map  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                    #keyboard.append(['üîÑ –û–±–Ω–æ–≤–∏—Ç—å'])

                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    response = ["üìã *–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:*"]
                    for task in tasks:
                        desc = escape_markdown(task.description, version=2)
                        due_time = escape_markdown(
                            task.due_time.strftime('%d.%m.%Y %H:%M'),
                            version=2
                        )
                        response.append(
                            f"*\\#{task.id.hex[:8]}*: {desc}\n"
                            f"–°—Ç–∞—Ç—É—Å: `{escape_markdown(task.status, version=2)}`\n"
                            f"–°—Ä–æ–∫: {due_time}"
                        )

                    await update.message.reply_text(
                        "\n\n".join(response),
                        parse_mode='MarkdownV2',
                        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    )

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤
                elif any(text.startswith(prefix) for prefix in ['‚úÖ', 'üö´', '‚õî']):
                    user = User.query.filter_by(telegram_id=user_id).first()
                    if not user:
                        await update.message.reply_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω!")
                        return

                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
                    task_id_short = text.split()[-1]
                    task_map = context.user_data.get('task_map', {})
                    task_id = task_map.get(task_id_short)

                    if not task_id:
                        await update.message.reply_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                        return

                    # –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ –ø–æ–ª–Ω–æ–º—É UUID
                    task = Task.query.filter(
                        Task.id == task_id,
                        Task.worker_id == user.id
                    ).first()

                    if not task:
                        await update.message.reply_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                        return

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                    try:
                        if text.startswith('‚úÖ'):
                            task.status = 'done'
                            task.completed_at = datetime.utcnow()
                            reply = "‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: –ó–∞–≤–µ—Ä—à–µ–Ω–æ"
                        elif text.startswith('üö´'):
                            task.status = 'canceled'
                            reply = "üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–±–ª–µ–º—ã:"
                            context.user_data['pending_task'] = task.id
                        elif text.startswith('‚õî'):
                            task.status = 'rejected'
                            reply = "üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:"
                            context.user_data['pending_task'] = task.id

                        db.session.commit()
                        logger.info(f"Task {task.id} status updated to {task.status}")
                        await update.message.reply_text(reply, reply_markup=ReplyKeyboardRemove())

                        await update.message.reply_text(
                            "–ú–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏",
                            reply_markup=ReplyKeyboardMarkup([["/mytasks"]], resize_keyboard=True)
                        )

                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {str(e)}", exc_info=True)
                        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω
                elif 'pending_task' in context.user_data:
                    task_id = context.user_data.pop('pending_task')
                    task = Task.query.get(task_id)
                    if task:
                        task.reason = text
                        db.session.commit()
                        logger.info(f"–ü—Ä–∏—á–∏–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –∑–∞–¥–∞—á–µ {task.id}")
                        await update.message.reply_text("üìù –ü—Ä–∏—á–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                elif update.message.contact:
                    phone = update.message.contact.phone_number
                    user = User.query.filter_by(phone_number=phone).first()
                    if user:
                        user.telegram_id = user_id
                        db.session.commit()
                        await update.message.reply_text(
                            "‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω!",
                            reply_markup=ReplyKeyboardMarkup([["/mytasks"]], resize_keyboard=True)
                        )

        application.add_handler(MessageHandler(filters.ALL, handle_message))
        application.run_polling()

    thread = threading.Thread(target=run_bot, daemon=True)
    thread.start()
